name: Configure All Repository Settings including Rulesets

# NOTE: this file will be triggered only if the other workflow has been run first
# Ruleset is imported at the time of repository creation from template. After that, this workflow is always skipped.
on:
    workflow_run:
        workflows:
            - "Check Required GitHub Token"
        types:
            - completed
    workflow_dispatch: # Enables manual trigger

jobs:
    check-required-conditions:
        runs-on: ubuntu-latest
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Get Workflow Run ID from a workflow where template was fully transformed into repository
              id: get-workflow-run-id
              run: |
                workflow_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_ACTIONS_WORKFLOW_TOKEN }}" \
                    -H "Accept: application/vnd.github+json" \
                    https://api.github.com/repos/${{ github.repository }}/actions/workflows | \
                    jq -r '.workflows[] | select(.name == "Finish tasks to fully transform template into repository") | .id')

                workflow_run_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_ACTIONS_WORKFLOW_TOKEN }}" \
                    -H "Accept: application/vnd.github+json" \
                    "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$workflow_id/runs" | \
                    jq -r '.workflow_runs[0].id')  # Get the ID of the latest workflow run

                if [ -z "$workflow_run_id" ]; then
                  echo "Workflow run ID not found. Skipping the check for 'rename-template-into-repository' job."
                  exit 0  # Exit the job entirely if no ID is available
                else
                  echo "Workflow run ID: $workflow_run_id"
                  echo "workflow_run_id=$workflow_run_id" >> $GITHUB_OUTPUT
                fi

            - name: Check if rename-template-into-repository job has been successfully executed
              if: ${{ steps.get-workflow-run-id.outputs.workflow_run_id }}
              id: check-template-into-repo-status
              run: |
                status="null"

                # Get the workflow run ID from the context
                workflow_run_id=${{ steps.get-workflow-run-id.outputs.workflow_run_id }}

                echo "Checking status for 'rename-template-into-repository' job in the workflow run ID: $workflow_run_id"

                # Fetch jobs for the specific workflow run ID related to "Finish tasks to fully transform template into repository"
                job_response=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_ACTIONS_WORKFLOW_TOKEN }}" \
                    -H "Accept: application/vnd.github+json" \
                    "https://api.github.com/repos/${{ github.repository }}/actions/runs/$workflow_run_id/jobs")

                # Filter out the rename-template-into-repository job (from "Finish tasks to fully transform template into repository")
                rename_project_job=$(echo "$job_response" | jq -c '[.jobs[] | select(.name == "rename-template-into-repository")]')

                # Extract job status and conclusion
                status=$(echo "$rename_project_job" | jq -r '.[0].status')
                conclusion=$(echo "$rename_project_job" | jq -r '.[0].conclusion')

                # Print the extracted job status and conclusion
                echo "Job status for 'rename-template-into-repository': $status"
                echo "Job conclusion for 'rename-template-into-repository': $conclusion"

                echo "conclusion=$conclusion" >> $GITHUB_OUTPUT

                # Check if the job is completed
                if [ "$status" == "null" ]; then
                    echo "'rename-template-into-repository' job status is null. It shouldn't have happened. Investigate."
                    exit 1
                elif [ "$conclusion" == "skipped" ]; then
                    echo "'rename-template-into-repository' job is skipped. Proceeding to the next step."
                    exit 0
                elif [ "$conclusion" == "success" ]; then
                    echo "'rename-template-into-repository' job has completed successfully. Proceeding to the next step."
                    exit 0
                else
                    echo "'rename-template-into-repository' not skipped nor success. Please investigate."
                    exit 1
                fi

            - name: Check if ruleset already pre-exists
              # NOTE: This is unused for now. Maybe we need this when we want to update multiple pre-existing repositories at once. It stays here, for now.
              id: check-ruleset-preexists
              run: |
                echo "Checking if rulesets already exist in repository settings."
                RESPONSE=$(curl -s -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GH_ACTIONS_WORKFLOW_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/${{ github.repository }}/rulesets")

                echo "API Response: $RESPONSE"

                if echo "$RESPONSE" | jq -e '. | length == 0' >/dev/null; then
                    echo "Ruleset does not exist yet."
                    echo "present=false" >> $GITHUB_OUTPUT
                else
                    echo "Ruleset already exists."
                    echo "present=true" >> $GITHUB_OUTPUT
                fi
        outputs:
            conclusion: ${{ steps.check-template-into-repo-status.outputs.conclusion }}
            ruleset_pre_exists: ${{ steps.check-ruleset-preexists.outputs.present }} # This is unused for now, maybe we use it later.

    update-settings:
        runs-on: ubuntu-latest
        needs: check-required-conditions
        if: ${{ needs.check-required-conditions.outputs.conclusion == 'success' }}
        steps:
            - name: Update Repository Settings only if it is just created from template and renamed into repository
              run: |
                curl -X PATCH -H "Authorization: token ${{ secrets.GH_ACTIONS_WORKFLOW_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }} \
                -d '{
                "allow_squash_merge": false,
                "allow_update_branch": true,
                "delete_branch_on_merge": true
                }'

    import-ruleset:
        runs-on: ubuntu-latest
        needs: check-required-conditions
        if: ${{ needs.check-required-conditions.outputs.conclusion == 'success' }}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Import ruleset into repository only if it is just created from template and renamed into repository
              run: |
                echo "Importing .github/rulesets/default_or_main_branch_protected.json..."
                curl -X POST -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GH_ACTIONS_WORKFLOW_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/${{ github.repository }}/rulesets" \
                -d @.github/rulesets/default_or_main_branch_protected.json

              # NOTE: for DEBUGGING and more INFO, add "-i" at the end of that ...json line above.
